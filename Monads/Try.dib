#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "nuget: LanguageExt.Core, 4.4.3"

#!csharp

using LanguageExt;
using static LanguageExt.Prelude;

using System.IO;

#!markdown

### Sometimes we want to model a computation that might throw exceptions. That's where Try comes into picture.

#!markdown

You can wrap the exception throwing code in a Try() function.

#!csharp

public Try<int> TryDivide(int nr, int dr) {
    return Try(() => nr / dr);
}

#!markdown

And you can convert a Try into an Option or Either (as shown below).

#!csharp

var tryDiv = TryDivide(4 ,2);
Console.WriteLine($"tryDiv: {tryDiv.ToOption()}");

var errorTryDiv = TryDivide(4 ,0);
Console.WriteLine($"errorTryDiv: {errorTryDiv.ToEither()}");

#!markdown

### If you are fine with another Try value -

#!csharp

var doubleTryDiv = tryDiv.Map(v => v * 2);
Console.WriteLine($"doubleTryDiv: {doubleTryDiv.ToOption()}");

var noDoubleErrorTryDiv = errorTryDiv.Map(v => v * 2);
Console.WriteLine($"noDoubleErrorTryDiv: {noDoubleErrorTryDiv.ToOption()}");

#!markdown

### But if a concrete value is needed -

#!csharp

var res = match( tryText,
                 Succ: contents => contents,
                 Fail: ex => $"Error: {ex.Message}" );
Console.WriteLine($"res: {res}");

#!markdown

### But what if some piece of code (which might throw exceptions) is not under our control? Again, wrap it in a Try() function.

#!csharp

var nonExistentFileName = "non-existent-file.txt";
var tryText = Try(() => File.ReadAllText(nonExistentFileName));

#!markdown

### Combining try(s)

#!csharp

var two = Try(() => int.Parse("2"));
var four = Try(() => int.Parse("4"));
var six = Try(() => int.Parse("6"));
var error = Try(() => int.Parse("a"));

#!markdown

#### We get a value because every try value is a success

#!csharp

int r = match( from x in two
               from y in four
               from z in six
               select x + y + z,
               Succ: v => v * 2,
               Fail: ex => 0 );
Console.WriteLine($"r: {r}");

#!markdown

#### We don't get a value because one of the try values is a failure

#!csharp

int r0 = match( from x in two
                from y in four
                from _ in error
                from z in six
                select x + y + z,
                Succ: v => v * 2,
                Fail: ex => 0 );
Console.WriteLine($"r0: {r0}");
